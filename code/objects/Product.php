<?php
class Product extends ProductBase
{
    public static $SpKeys = ["spnl","spfr","sp1","sp2","sp3","sp5","sp7"];

    public function Init($row)
    {
        global $SITE_URL;
        parent::Init($row);

        $spler = ["Spnl","Spfr","Sp1","Sp2","Sp3","Sp5","Sp7"];
        $spDegerler = [];

        $this->LastSupplier = "";
        $this->LastStock = 0;
        $this->LastCost = 0.00;

        foreach ($spler as $value)
        {
            $StockPName = $value . "Stock";
            $CostPName = $value . "Cost";
            if($this->{$StockPName} > 0 && $this->{$CostPName} > 0)
                $spDegerler[$value] = $this->{$CostPName};
        }
        if(count($spDegerler) > 0)
        {
            $minKeys = array_keys($spDegerler, min($spDegerler));
            $minKey = reset($minKeys);

            $this->LastSupplier = $minKey;
            $this->LastStock = $this->{$minKey."Stock"};
            $this->LastCost = $this->{$minKey."Cost"};
        }

        $this->LastStock -= $this->ProcessingStock;

        if($this->ImageIds)
        {
            $arrs = [];
            foreach ($this->ImageIds as $iId)
                $arrs[] = $SITE_URL . $iId->Yol;
            $this->Images = implode("|",$arrs);
        }
    }
}

class ProductDb extends ProductDbBase
{
    public function CustomParamToWhere($param, $value, $operator = null)
    {
        switch($param)
        {
            case 'StockGt':
                return "(spnl_stock > 0 OR spfr_stock > 0 OR sp1_stock > 0 OR sp2_stock > 0 OR sp3_stock > 0 OR sp5_stock > 0 OR sp7_stock > 0)";
        }
        return parent::CustomParamToWhere($param, $value, $operator); // TODO: Change the autogenerated stub
    }

    public static function Update($id, $veri)
    {
        return DbPdo::Update("products", $veri, "id=$id");
    }

    public static function UpdateProcess($veri)
    {
        $params = Product::AsParams();
        $params->CompanyId = Condition::EQ($veri["company_id"]);
        $params->ProjectId = Condition::EQ($veri["project_id"]);
        $params->Ean = Condition::EQ($veri["ean"]);
        $product = self::Get()->GetFirst($params);
        if($product)
            return DbPdo::Update("products", $veri, "id=$product->Id");
        echo "---------<br>";
        ArrayShortInfo($veri);
        echo "---------<br>";
        return false;
    }
    public static function GetAllEski($vendorId)
    {
        $list = DbPdo::GetAll("products", " vendor_id=$vendorId ");
        $productListe = [];
        $productIds = [];
        foreach($list as $key => $veri)
        {
            $productListe[$veri["id"]] = $veri;
            $productIds[] = $veri["id"];
        }
        $pAttrs = ProductAttributeDb::Get()->GetList(array("ProductId" => Condition::InList($productIds)));
        foreach($pAttrs as $attr)
            $productListe[$attr->ProductId][$attr->AttributeName] = $attr->Value;
        return $productListe;
    }
    public static function GetAll($vendorId)
    {
        $list = DbPdo::GetAll("vendor_products", " vendor_id=$vendorId ");
        $productListe = [];
        $productIds = [];
        foreach($list as $key => $veri)
        {
            $productListe[$veri["ean"]] = $veri;
            //$productIds[] = $veri["id"];
        }
        /*$pAttrs = ProductAttributeDb::Get()->GetList(array("ProductId" => Condition::InList($productIds)));
        foreach($pAttrs as $attr)
            $productListe[$attr->ProductId][$attr->AttributeName] = $attr->Value;*/
        return $productListe;
    }
    public static function SaveAll($veriler)
    {
        for ($i = 0; $i < count($veriler); $i += 500)
        {
            $parcaVeriler = array_slice($veriler, $i, 500);
            DbPdo::SaveAll("products", $parcaVeriler);
        }
    }
}
